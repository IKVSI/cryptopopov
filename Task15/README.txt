# Task15: Протокол аутентификации на основе нулевого разглашения

Протокол аутентификации на основе нулевого разглашения. Реализация на основе проблемы дискретного логарифмирования.
Alice доказывает Bob, что знает значение X для решения  A^X = C (mod prime)

## Описание протокола

    1) Алиса хочет доказать, что знает X, в уравнении A^X = C (mod prime)
    числа A, C, prime общедоступны, X взаимно просто с prime-1
    2) Алиса генерирует t случайных чисел Ri < prime-1
    3) Алиса вычисляет Hi = A ^ Ri (mod prime) и посылает их Бобу
    4) Алиса и Боб используя любой протокол бросания монеты генерируют t битов
    5) Для каждого t бита выполняем:
        5.1) Если бит 0 Алиса посылает Ri, если 1 Ri-Rj (mod prime - 1), где j это наименьшее значение индекса при котором бит = 1
        5.2) Боб проверяет, если бит = 0, то выполняется A ^ Ri == Hi (mod prime)
                если бит = 1, то A ^ (Ri-Rj) == Hi*Hj^-1 (mod prime)
    6) Алиса посылает Бобу Z = (X - Rj) (mod prime-1)
    7) Боб проверяет, что сравнимо A^Z == B*Hj^-1 (mod prime)
    8) Если всё сошлось, то Боб с уверенностью 1-1/(2^t) может быть уверен что Алиса знает X

## Использование

Пользователю предлагается выбрать количество проверок для Алисы чтобы убедиться в знании факта.

### Help программы:

usage: main.py [-h] [-n N]

Реализация протокола доказательства с нулевым разглашением на основе
дискретного логорифма

optional arguments:
  -h, --help  show this help message and exit
  -n N        Количество проверок для убеждения Боба, default=15

## Примеры работы

Для удобства есть сценарий:

execute.bat
--------------------------------------------------------------------------------
@ECHO OFF
TITLE MASTER
python main.py
PAUSE
--------------------------------------------------------------------------------

### Логи Программы: test.file

Alice  : Нужно доказать Бобу, что знаю X для решения уравнения
Alice  : 538 ^ X = 1352 (mod 1571)
Alice  : Генерируем 15 значений Ri < Prime-1 (столько нужно чтобы убедить Боба)
Alice  : Вычисляем Hi = 538 ^ Ri (mod 1571) и посылаем Бобу
Alice  : Используя протокол бросания монетки генерируем 15 битов
Alice  : Посылаем бобу 4068937(N) = 3529(p) * 1153(q)
Bob    : Получены Hi
Bob    : Сгенерировано 15 Z=r^2 (mod N) квадратичных вычетов
Alice  : Пытаемся угадать вычеты и отправляем Бобу
Bob    : На основе ответов Алисы сгенерированы биты B
Alice  : Получены биты B: [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1]
Alice  : Получены корни боба r
Alice  : Биты по r Боба: [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1]
Alice  : Генерируем сообщение M если Bi=0 то Ri, если Bi=1 то Ri-R1 mod (prime-1)
Alice  : Также посылаем Бобу X-R1 (mod prime-1)
Bob    : Начинаем проверку утверждений
Bob    : если Bi = 0, то A^Mi = Hi (mod prime)
Bob    : если Bi = 1, то A^Mi = Hi*Hj^-1 (mod prime)
Bob    : ANS: [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
Bob    : FINAL=True Я уверен что Алиса знает X с вероятностью 0.999969



## Дополнительные зависимости

module sympy
    можно установить командой (от администратора) pip3 install sympy
также этот сценарий лежит в файле dependencies.bat

module Cryptodome
    можно установить командой (от администратора) pip3 install pycryptodomex
также этот сценарий лежит в файле dependencies.bat

## Кластер

Windows 10 Home Russian Версия 1809
Python 3.7.2 32bit
12GB RAM
Intel Core I7-4710MQ 2.50Ghz

## Автор

Кулаков Владислав Сергеевич КБ-501 © 2019

