# Task02: Головоломки Меркла

Реализация протокола передачи зашифрованного сообщения с помошью головоломок Меркла
путём уменьшения ключа в шифре AES.
Также симуляция деятельности Евы по взлому сообщения.

## Описание протокола

    1) A генерирует много сообщений с коротким ключом вида "случайный X+ключ Y" и публикует
    2) B берёт одно из них, взламывает, шифрует сообщение ключом Y и стойким алгоритмом
    3) A по X расшифровывает сообщение ключом Y

    E пока не найдёт нужный X в сообщениях, не сможет их понять. То есть E взламывает все сообщения в поисках X


## Использование

Это приложение использует модуль multiprocessing для создания отдельных процессов.
Алиса, Боб и Ева вынесены в отдельные процессы и организованна передача данных
между ними. Тем самым можно считать их отдельными приложениями(форками).
Пользователю предлагается определить количество сообщений и количество бит ключа.
Также можно устроить Еве плохой день -badday и боб выберет последнее сообщение.
Тем самым получим худший вариант когда Ева сможет взломать информацию, только
когда откроет последнее сообщение. Для больших ключей иногда очень долго приходится
ждать взлома, для этого есть ключ -status который добавит дополнительную информацию
в ожидании взлома 1 сообщения.

### Help программы:

usage: main.py [-h] [-n N] [-b B] [-badday] [-status STATUS]

Реализация Головоломки Меркла на основе укорачивания ключа

optional arguments:
  -h, --help      show this help message and exit
  -n N            Количество генерируемых сообщений
  -b B            Количество бит для ключа сообщений
  -badday         Худший случай для Eva (Bob выбрал последее сообщение)
  -status STATUS  Количество дополнительных временные отметок взлома


## Примеры работы

Для удобства есть сценарий:

execute.bat
--------------------------------------------------------------------------------
@ECHO OFF
python main.py -n 50 -b 15 -badday -status 10
PAUSE
--------------------------------------------------------------------------------

### Логи Программы: badday.file

python main.py -n 100 -b 20 -badday 
Alice  : Генерируем 100 сообщений шифруя 20-bit ключом
Alice  : Публикуем сгенерированные сообщения
Eva    : Получены сообщения Алисы
Bob    : Получены сообщения Алисы
Bob    : Выбрано сообщение 99 для взлома
Bob    : Расшифрованно сообщение MESSAGE X=86 KEY=b"\x01\xfc\xb7'\x18\x1b# \xa7\t\x1a\xd6P\xd6V\xed\xc3\xb4\xbb@\xad$\xca\xc8\x16\xb7\x1a@\xc8\xaa\xcb\xf1"
 Затрачено времени: 2.9223248958587646 c
Bob    : Отправленно секретное сообщение для Alice c ключом номер 86
Alice  : Получено секретное сообщение от Боба с ключом номер 86
  M: b'H-\x98\xc0\xd3\x86>\x9c4\xb6\xc9Km\x1aA\x018\x11gQ\xc0\x1a\xd7\x9c\xca\x15\xa1\xd4\xba\x87\x00\xdb'
Alice  : M: Hello Alice
Eva    : Секретное сообщение взломано ключом 86
  M: Hello Alice
 Затрачено времени: 1008.6355872154236 c


## Дополнительные зависимости

module Cryptodome
    можно установить командой (от администратора) pip3 install pycryptodomex
также этот сценарий лежит в файле dependencies.bat

## Кластер

Windows 10 Home Russian Версия 1809
Python 3.7.2 32bit
12GB RAM
Intel Core I7-4710MQ 2.50Ghz


## Автор

Кулаков Владислав Сергеевич КБ-501 © 2019

